version: '3'
services:
  server:
    image: postgrest/postgrest:v5.1.0
    links:
      - db:db
    environment:
      PGRST_DB_URI: postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      PGRST_DB_SCHEMA: api
      PGRST_DB_ANON_ROLE: web_anon
    restart: unless-stopped
    depends_on:
      - db
  statsFacade:
    image: tomsaleeba/swarm-rest-metrics-facade:1.1.0
    ports:
      - "${EXTERNAL_LISTEN_PORT}:80"
      - "3000:80" # deprecated, remove once all users of ausplotsR have upgraded
    links:
      - server:server
      - elk:elk
    environment:
      TARGET_URL: http://server:3000
      LISTEN_PORT: 80
      ES_URL: http://elk:${ES_PORT}
      INDEX_NAME: ${ES_INDEX_NAME}
    restart: unless-stopped
    depends_on:
      - server
      - elk
  db:
    image: postgres:10
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: unless-stopped
    volumes:
      - "swarm-pgdata:/var/lib/postgresql/data"
  elk:
    image: sebp/elk:642
    ports:
      - "${KIBANA_PORT}:5601"
      - "${ES_PORT}:9200"
    environment:
      - LOGSTASH_START=0 # we don't need LogStash
      - AWS_ACCESS_KEY # override in shell at deploy time
      - AWS_SECRET # override in shell at deploy time
      - AWS_BUCKET=${S3_BUCKET}
      - ES_SNAPSHOT_REPO
      - KIBANA_CONNECT_RETRY=60 # the default 30 seconds doesn't seem long enough
    restart: unless-stopped
    volumes:
      - "elk-data:/var/lib/elasticsearch"
      - "./elk-pre-hook.sh:/usr/local/bin/elk-pre-hooks.sh"
      - "./elk-post-hook.sh:/usr/local/bin/elk-post-hooks.sh"
  croncurl:
    build: ./curl-cron
    links:
      - elk:elk
    environment:
      ES_HOST: elk
      ES_PORT: ${ES_PORT}
      ES_SNAPSHOT_REPO: ${ES_SNAPSHOT_REPO}
      BACKUP_PREFIX: swarm-metrics
      CRON_SCHEDULE: '3 9 * * *'
    restart: unless-stopped
    depends_on:
      - elk
  db-sync:
    build: ./db-sync
    links:
      - db:db
    environment:
      FROM_USER: ${SWARM_PROD_USER}
      FROM_PASS: ${SWARM_PROD_PASS}
      FROM_HOST: ${SWARM_PROD_HOST}
      FROM_PORT: ${SWARM_PROD_PORT}
      FROM_DB: ${SWARM_PROD_DB}
      TO_USER: ${DB_USER}
      TO_PASS: ${DB_PASSWORD}
      TO_HOST: db
      TO_PORT: 5432
      TO_DB: ${DB_NAME}
      CRON_SCHEDULE: '1 1 * * *'
    restart: unless-stopped
    depends_on:
      - db
volumes:
  elk-data:
  swarm-pgdata:

